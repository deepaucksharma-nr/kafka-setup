apiVersion: v1
kind: ConfigMap
metadata:
  name: newrelic-config
  namespace: ${KAFKA_NAMESPACE}
data:
  nri-kafka-config.yml: |
    integrations:
      - name: nri-kafka
        env:
          # Cluster identification
          CLUSTER_NAME: ${KAFKA_CLUSTER_NAME}
          
          # Temporary workaround: Use Zookeeper discovery due to bootstrap bug
          AUTODISCOVER_STRATEGY: zookeeper
          ZOOKEEPER_HOSTS: '[{"host": "zookeeper.kafka-monitoring.svc.cluster.local", "port": 2181}]'
          # BOOTSTRAP_SERVERS is still needed for some operations
          BOOTSTRAP_SERVERS: kafka-0.kafka.kafka-monitoring.svc.cluster.local:9092
          
          # Broker metrics collection
          COLLECT_BROKER_TOPIC_DATA: true
          COLLECT_TOPIC_SIZE: true
          
          # Topic monitoring - monitor all topics or use patterns
          # Option 1: Monitor all topics (recommended for comprehensive monitoring)
          TOPIC_MODE: all
          
          # Option 2: Use regex patterns (uncomment if needed)
          # TOPIC_MODE: regex
          # TOPIC_REGEX: '.*'  # Matches all topics
          
          # Option 3: Specific topic list (uncomment if needed)
          # TOPIC_MODE: list
          # TOPIC_LIST: '["standard-p5-topic", "high-throughput-topic", "share-group-workqueue-1", "share-group-workqueue-2", "share-group-workqueue-3", "user-profiles-compact", "transaction-topic", "compressed-lz4-topic", "compressed-gzip-topic", "compressed-snappy-topic", "compressed-zstd-topic", "retention-60000ms-topic", "retention-300000ms-topic", "retention-3600000ms-topic", "size-retention-topic"]'
          
          # Consumer group monitoring
          COLLECT_CONSUMER_GROUP_DATA: true
          CONSUMER_GROUP_MODE: all  # Monitor all consumer groups
          
          # Alternatively, use regex for consumer groups
          # CONSUMER_GROUP_MODE: regex
          # CONSUMER_GROUP_REGEX: '.*'  # Matches all groups
          
          # JMX connection settings
          JMX_HOST: kafka-0.kafka.kafka-monitoring.svc.cluster.local
          JMX_PORT: 9999
          JMX_USER: ""
          JMX_PASSWORD: ""
          
          # Collection intervals and timeouts
          TIMEOUT: 30000  # 30 seconds timeout for operations
          
          # Performance tuning
          MAX_JMX_CONNECTIONS: 10
          THREAD_POOL_SIZE: 10
          
          # Metrics collection levels
          COLLECT_BROKER_LOGS: true
          COLLECT_BROKER_DISK_USAGE: true
          
          # Producer/Consumer offset tracking
          PRODUCER_OFFSET: true
          CONSUMER_OFFSET: true
          # Consumer groups to monitor (required when CONSUMER_OFFSET is true)
          CONSUMER_GROUP_REGEX: '.*'
          
          # Topic partition details
          TOPIC_BUCKET_SIZE: 150  # Number of topics to fetch per request
          
          # Kafka API versions (for compatibility)
          API_VERSION: auto  # Auto-detect API version
          
        interval: 30s
        timeout: 30s
        
      # Additional instance for consumer lag monitoring with higher frequency
      - name: nri-kafka
        env:
          CLUSTER_NAME: ${KAFKA_CLUSTER_NAME}-consumer-lag
          AUTODISCOVER_STRATEGY: zookeeper
          ZOOKEEPER_HOSTS: '[{"host": "zookeeper.kafka-monitoring.svc.cluster.local", "port": 2181}]'
          BOOTSTRAP_SERVERS: kafka-0.kafka.kafka-monitoring.svc.cluster.local:9092
          
          # Focus on consumer metrics only
          COLLECT_BROKER_TOPIC_DATA: false
          COLLECT_TOPIC_SIZE: false
          COLLECT_CONSUMER_GROUP_DATA: true
          CONSUMER_GROUP_MODE: all
          
          # Skip JMX for consumer-only monitoring
          SKIP_JMX_DATA: true
          
        interval: 15s  # More frequent consumer lag checks
        timeout: 15s
        labels:
          purpose: consumer-lag-monitoring
          
  # Additional configuration for metrics allowlist/blocklist
  nri-kafka-metrics.yml: |
    # Metrics to always collect (allowlist)
    metrics:
      allowlist:
        - kafka.broker:type=BrokerTopicMetrics,name=MessagesInPerSec,topic=*
        - kafka.broker:type=BrokerTopicMetrics,name=BytesInPerSec,topic=*
        - kafka.broker:type=BrokerTopicMetrics,name=BytesOutPerSec,topic=*
        - kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*
        - kafka.producer:type=producer-metrics,client-id=*
        - kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions
        - kafka.server:type=ReplicaManager,name=OfflineReplicaCount
        - kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent
        - kafka.network:type=RequestMetrics,name=TotalTimeMs,request=*
        - kafka.log:type=LogFlushStats,name=LogFlushRateAndTimeMs
        - kafka.controller:type=KafkaController,name=OfflinePartitionsCount
        - kafka.server:type=BrokerTopicMetrics,name=TotalProduceRequestsPerSec
        - kafka.server:type=BrokerTopicMetrics,name=TotalFetchRequestsPerSec
        - kafka.server:type=BrokerTopicMetrics,name=FailedProduceRequestsPerSec
        - kafka.server:type=BrokerTopicMetrics,name=FailedFetchRequestsPerSec
        
      # Metrics to exclude (blocklist) - reduce noise
      blocklist:
        - kafka.server:type=*,name=*.min
        - kafka.server:type=*,name=*.max
        - kafka.server:type=*,name=*.stddev